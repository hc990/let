# -*- coding: utf-8 -*-'''Created on 2012-3-19@author: zongzong'''from core.basehandler import BaseHandlerfrom db.mongo import Mongofrom models.exchange import Exchangefrom models.order import Orderfrom models.package import Packagefrom models.product import Productfrom models.user import Userfrom tornado.web import authenticatedfrom views.decorators import role_required, routefrom views.paginator import Paginatorfrom datetime import *from util import paramPortMibimport datetimeimport binasciiimport timeimport types@route('/manage')class ManagerHandler(BaseHandler):           @authenticated       @role_required('/manage')    def post(self):             cname = self.get_argument("cname", '')        oname = self.current_user['_id']        status = self.get_argument("status", None)        # page info        page = self.get_argument('page', 1)        page = page if page >= 1 else 1        # get the document count param        count = self.get_argument('count', 10)        count = count if count >= 1 else 10        template_values = {}        if status is not None and status != '':            products = Product.getProducts(cname, status, oname)            template_values['status'] = status        else:            products = Product.getAllProducts(cname, oname)            template_values['status'] = ''        # create a Paginator object        paginator = Paginator(products, page, count, len(products))        template_values['cname'] = cname        template_values['paginator'] = paginator        self.render_template('/site/manage.html', **template_values)    @authenticated   #   @role_required('/manage')    def get(self):        oname = self.get_current_user()['_id']        products = Product.getOperatorProducts(oname)        # page info        page = self.get_argument('page', 1)        page = page if page >= 1 else 1        # get the document count param        count = self.get_argument('count', 10)        count = count if count >= 1 else 10        paginator = Paginator(products, page, count, len(products))        template_values = {}        template_values['cname'] = ''        template_values['status'] = ''        template_values['paginator'] = paginator        self.render_template('/site/manage.html', **template_values)        @route('/custorm_add')class AddCustormHandler(BaseHandler):        @authenticated    @role_required('/custorm_add')    def get(self):        template_values = {}        template_values['next'] = self.get_argument('next', '/')        oname = self.current_user['_id']        template_values['exchanges'] = Exchange.get_active_exchanges(oname, 1)        template_values['packages'] = Package.getPackages()        self.render_template('/site/custorm_add.html', **template_values)        # This model abput resolving mult_email sending function     @staticmethod      def emailfun(self, emailstr, emaillist):        if emailstr:            index = emailstr.find(';', 0, len(emailstr))             if index > 0:                emaillist.append(emailstr[0:index])                self.emailfun(self, emailstr[index + 1:], emaillist)            else:                emaillist.append(emailstr)                      @authenticated    @role_required('/custorm_add')    def post(self):          oname = self.get_username()        cname = self.get_argument("cname", None)        linenum = self.get_argument("linenum", None)        package_id = self.get_argument("package_id", None)        address = self.get_argument("address", None)        phonenum = self.get_argument("phonenum", None)         port = self.get_argument("port", '')        e_id = self.get_argument("e_id", None)          ori_bandwidth = int(self.get_argument("ori_bandwidth", None))                 ascend_bandwidth = int(self.get_argument("ascend_bandwidth", None))        begin_at = datetime.datetime.strptime(self.get_argument("begin_at", None), "%m/%d/%Y %H:%M")        suspended_at = datetime.datetime.strptime(self.get_argument("suspended_at", None), "%m/%d/%Y %H:%M")        emailstr = self.get_argument("email", '')        custom_time = self.get_argument("custom_time1", None)        if custom_time:            custom_time = custom_time + ':00'        else:            custom_time = '0:00'#         t = time.strptime(custom_time,"%H:%M")  #         i =  time.strftime("%m/%d/%Y %X",time.strptime(custom_time,"%H:%M")) #         d = datetime.datetime.strptime(time.strftime("%m/%d/%Y %X",time.strptime(custom_time,"%H:%M")) ,"%m/%d/%Y %H:%M:%S")   #         datetime_h = datetime.time.strftime(d.time(),"%H:%M")#将其变为字符串型#         print str(custom_time)#         print datetime_h        y_m_r = datetime.datetime.date(begin_at)  # 日期             datetime_date = datetime.datetime.strftime(y_m_r, "%m/%d/%Y")  # 将其变为字符串型        order_time = datetime.datetime.strptime((datetime_date + str(custom_time)), "%m/%d/%Y%H:%M")        print order_time        product_id = Product.insert(oname, cname, linenum, package_id, address, phonenum, emailstr, e_id, ori_bandwidth, ascend_bandwidth, port, begin_at, suspended_at, custom_time)#         products = Product.getProduct(cname)#         for product in products:#             print product['_id']        exchange = Exchange.lookup(e_id)  # 交换机信息        package = Package.lookup(package_id)  # 套餐信息        hour = datetime.timedelta(hours=package['avail_timelong'])  # package中的可用时间间隔        between = suspended_at - begin_at        one_day = datetime.timedelta(days=1)        manual_time = order_time + hour  # 调整时间        week = [0, 1, 2, 3, 4]          # 迭代between.days时间内的数据        for i in range(between.days + 1):             if package['is_weekday'] == 0 and begin_at.weekday() in week:                    Order.insert(ascend_bandwidth, package_id, exchange['_id'], port, 1, order_time, datetime.datetime.now(), exchange['ipAddress'], cname, product_id)                     Order.insert(ori_bandwidth, package_id, exchange['_id'], port, 1, manual_time, datetime.datetime.now(), exchange['ipAddress'], cname, product_id)            elif package['is_weekday'] == 1:                    Order.insert(ascend_bandwidth, package_id, exchange['_id'], port, 1, order_time, datetime.datetime.now(), exchange['ipAddress'], cname, product_id)                     Order.insert(ori_bandwidth, package_id, exchange['_id'], port, 1, manual_time, datetime.datetime.now(), exchange['ipAddress'], cname, product_id)            else:                pass                begin_at = begin_at + one_day            order_time = order_time + one_day            manual_time = manual_time + one_day        '''        package = Package.getPackageByName(package_id)           if package_id == 'A':            if custom_time >= package[0]['avail_begintime']:                if custom_time <= datetime.datetime.strptime('15:00',"%H:%M"):                    Product.insert(oname,cname, linenum, package_id, address, phonenum,  emailstr, e_id, ori_bandwidth, ascend_bandwidth, port, begin_at, suspended_at, custom_time)                print "Error here"            else:                print "Error"                elif package_id == 'B':            Product.insert(oname,cname, linenum, package_id, address, phonenum,  emailstr, e_id, ori_bandwidth, ascend_bandwidth, port, begin_at, suspended_at, custom_time)        elif package_id == 'C':            if custom_time >= package[0]['avail_begintime']:                if custom_time <= datetime.datetime.strptime('20:00',"%H:%M"):                    Product.insert(oname,cname, linenum, package_id, address, phonenum,  emailstr, e_id, ori_bandwidth, ascend_bandwidth, port, begin_at, suspended_at, custom_time)            else:                print "Error"          '''        '''        user = User.lookup(cname)          if not user:            from util import password_util              from util import mail_util               password = password_util.pass_gen(15,)            #send email to many people            for email in emaillist:                mail_util.sent_mail("", '%s, %s' % (cname,password), cname, email)        '''        '''            mail_util.sent_mail("", '%s, %s' % (cname,password) \            , cname, email)        '''         '''                  user = User.instance(cname, password, 3)               Mongo.db.ui['users'].insert(user)          '''        self.redirect("/manage")          @route('/custorm_mod')  class ModifiedCustormHandler(BaseHandler):        @authenticated    @role_required('/custorm_mod')    def get(self):        _cid = self.get_argument("name", None)        status = self.get_argument("status", None)        percent = self.get_argument("percent", None)        begin_at = datetime.datetime.strptime(self.get_argument("begin_at", None), "%m/%d/%Y %H:%M")        suspended_at = datetime.datetime.strptime(self.get_argument("suspended_at", None) , "%m/%d/%Y %H:%M")        Product.update(status, percent, begin_at, suspended_at)          custormers = Product.getAllProducts()        template_values = {}        template_values['products'] = custormers        self.render_template('/site/manage.html', **template_values)        @route('/custorm_del')class DelCustormHandler(BaseHandler):    def post(self):        _cid = self.get_argument("c_id", None)          print _cid        Product.updateProduct(_cid, 0)        Order.withdraw_order(_cid)        self.finish("finished")                    @route('/custorm_active')class ActiveCustormHandler(BaseHandler):    def post(self):        _cid = self.get_argument("c_id", None)        Product.updateProduct(_cid, 1)          Order.active_order(_cid)        self.finish("finished")                @route('/sysdesc')class TestHandler(BaseHandler):    def get(self):         _cid = self.get_argument("c_id", None)        template_values = {}        values = {}        varBinds = paramPortMib.getIfPort('192.168.11.253', 'jztec', 'jztec')        vars = ",".join(str(d) for d in varBinds)        objectName = vars[12:29]        # 截取vars中的16进制的数字转化为字符串输出来          t = vars[54:-3]        sysdescription = binascii.a2b_hex(t)            template_values['objectName'] = objectName        template_values['sysdescription'] = sysdescription          values['objectName'] = objectName        values['sysdescription'] = sysdescription        template_values['values'] = values           self.render_template('/site/info.html', **template_values)        '''      @route('/get_parameters')class ParametersHandler(BaseHandler):    def get(self):        _id = self.get_argument('package_name')        package = Package.lookup(_id)        print package        values = {}        values['begin'] = package['avail_begintime']        if package['avail_endtime'] <= package['avail_begintime']:            values['end'] = package['avail_endtime'] + 24 - package['avail_timelong']        else:            values['end'] = package['avail_endtime'] - package['avail_longtime']        self.render_template('/site/custorm_add.html', **values)         '''                 